{"remainingRequest":"/Users/jorgemorais/Desktop/Calculadora-Vue.js/calculator/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jorgemorais/Desktop/Calculadora-Vue.js/calculator/src/main/Calculator.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/jorgemorais/Desktop/Calculadora-Vue.js/calculator/src/main/Calculator.vue","mtime":1636831984662},{"path":"/Users/jorgemorais/Desktop/Calculadora-Vue.js/calculator/node_modules/css-loader/dist/cjs.js","mtime":1636795583944},{"path":"/Users/jorgemorais/Desktop/Calculadora-Vue.js/calculator/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1636795592097},{"path":"/Users/jorgemorais/Desktop/Calculadora-Vue.js/calculator/node_modules/postcss-loader/src/index.js","mtime":1636795586143},{"path":"/Users/jorgemorais/Desktop/Calculadora-Vue.js/calculator/node_modules/cache-loader/dist/cjs.js","mtime":1636795580196},{"path":"/Users/jorgemorais/Desktop/Calculadora-Vue.js/calculator/node_modules/vue-loader/lib/index.js","mtime":1636795589080}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5jYWxjdWxhdG9yIHsKICBoZWlnaHQ6IDMyMHB4OwogIHdpZHRoOiAyMzVweDsKICBib3JkZXItcmFkaXVzOiA1cHg7CgogIGRpc3BsYXk6IGdyaWQ7CiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoNCwgMjUlKTsKICBncmlkLXRlbXBsYXRlLXJvd3M6IDFmciA0OHB4IDQ4cHggNDhweCA0OHB4IDQ4cHg7Cn0K"},{"version":3,"sources":["Calculator.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwFA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"Calculator.vue","sourceRoot":"src/main","sourcesContent":["<template>\n  <div class=\"calculator\">\n    <Display :value=\"displayValue\" />\n    <Button label=\"AC\" triple @onClick=\"clearMemory\" />\n    <Button label=\"/\" operation @onClick=\"setOperation\" />\n    <Button label=\"7\" @onClick=\"addDigit\" />\n    <Button label=\"8\" @onClick=\"addDigit\" />\n    <Button label=\"9\" @onClick=\"addDigit\" />\n    <Button label=\"*\" operation @onClick=\"setOperation\" />\n    <Button label=\"4\" @onClick=\"addDigit\" />\n    <Button label=\"5\" @onClick=\"addDigit\" />\n    <Button label=\"6\" @onClick=\"addDigit\" />\n    <Button label=\"-\" operation @onClick=\"setOperation\" />\n    <Button label=\"1\" @onClick=\"addDigit\" />\n    <Button label=\"2\" @onClick=\"addDigit\" />\n    <Button label=\"3\" @onClick=\"addDigit\" />\n    <Button label=\"+\" operation @onClick=\"setOperation\" />\n    <Button label=\"0\" double @onClick=\"addDigit\" />\n    <Button label=\".\" @onClick=\"addDigit\" />\n    <Button label=\"=\" operation @onClick=\"setOperation\" />\n  </div>\n</template>\n\n<script>\nimport Display from \"../components/Display\";\nimport Button from \"../components/Button\";\n\nexport default {\n  data: function () {\n    return {\n      displayValue: \"0\",\n      clearDisplay: false,\n      operation: null,\n      values: [0, 0],\n      current: 0,\n    };\n  },\n  components: { Button, Display },\n  methods: {\n    clearMemory() {\n      Object.assign(this.$data, this.$options.data());\n    },\n    setOperation(operation) {\n      if (this.current === 0) {\n        this.operation = operation;\n        this.current = 1;\n        this.clearDisplay = true;\n      } else {\n        const equals = operation === \"=\";\n        const currentOperation = this.operation;\n\n        try {\n          this.values[0] = eval(\n            `${this.values[0]}${currentOperation} ${this.values[1]}`\n          );\n          if (isNaN(this.values[0]) || !isFinite(this.values[0])) {\n            this.clearMemory();\n            return;\n          }\n        } catch (e) {\n          this.$emit(\"onError\", e);\n        }\n\n        this.values[1] = 0;\n\n        this.displayValue = this.values[0];\n        this.operation = equals ? null : operation;\n        this.current = equals ? 0 : 1;\n        this.clearDisplay = !equals;\n      }\n    },\n    addDigit(n) {\n      if (n === \".\" && this.displayValue.includes(\".\")) {\n        return;\n      }\n\n      const clearDisplay = this.displayValue === \"0\" || this.clearDisplay;\n      const currentValue = clearDisplay ? \"\" : this.displayValue;\n      const displayValue = currentValue + n;\n\n      this.displayValue = displayValue;\n      this.clearDisplay = false;\n      this.values[this.current] = displayValue;\n    },\n  },\n};\n</script>\n<style>\n.calculator {\n  height: 320px;\n  width: 235px;\n  border-radius: 5px;\n\n  display: grid;\n  grid-template-columns: repeat(4, 25%);\n  grid-template-rows: 1fr 48px 48px 48px 48px 48px;\n}\n</style>"]}]}